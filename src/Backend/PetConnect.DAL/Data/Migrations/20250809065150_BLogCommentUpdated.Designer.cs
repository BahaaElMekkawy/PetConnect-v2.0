// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetConnect.DAL.Data;

#nullable disable

namespace PetConnect.DAL.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250809065150_BLogCommentUpdated")]
    partial class BLogCommentUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.AdminDoctorMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("AdminDoctorMessage");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.AdminPetMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("AdminPetMessage");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PetId")
                        .HasColumnType("int");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Confirmed");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("SlotId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Blog", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Media")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("excerpt")
                        .HasColumnType("varchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.BlogComment", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CommentORReplyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Media")
                        .HasColumnType("varchar(200)");

                    b.HasKey("ID");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.BlogCommentReply", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentORReplyORLikeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentReply")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Media")
                        .HasColumnType("varchar(200)");

                    b.HasKey("ID");

                    b.ToTable("BlogCommentReplies");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerAddedPets", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdditionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.ToTable("CustomerAddedPets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerPetAdoptions", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterCustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdoptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "RequesterCustomerId", "AdoptionDate");

                    b.HasIndex("ReceiverCustomerId");

                    b.HasIndex("RequesterCustomerId");

                    b.ToTable("CustomerPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("OrderProductStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("orderProducts");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PetBreeds");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PetCategory");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PetPreedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetPreedId");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Shelter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shelters");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterAddedPets", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "ShelterId");

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.HasIndex("ShelterId");

                    b.ToTable("ShelterAddedPets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterImages", b =>
                {
                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ShelterId", "ImgUrl");

                    b.ToTable("ShelterImages");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterLocations", b =>
                {
                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.HasKey("ShelterId", "LocationCode");

                    b.ToTable("ShelterLocations");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPetAdoptions", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "ShelterId");

                    b.HasIndex("ShelterId");

                    b.ToTable("ShelterPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPhones", b =>
                {
                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(15)");

                    b.HasKey("ShelterId", "Phone");

                    b.ToTable("ShelterPhones");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookedCount")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogComment", b =>
                {
                    b.Property<Guid>("BlogCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("BlogCommentId");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogComments");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogCommentLike", b =>
                {
                    b.Property<Guid>("BlogCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("BlogCommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogCommentLikes");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogCommentReply", b =>
                {
                    b.Property<Guid>("BlogCommentReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReplyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("BlogCommentReplyId");

                    b.HasIndex("BlogCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogCommentReplies");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogCommentReplyLike", b =>
                {
                    b.Property<Guid>("BlogCommentReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("BlogCommentReplyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogCommentReplyLikes");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogLike", b =>
                {
                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlogLikes");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserConnection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConnection");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UsersMessages", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("RecieverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("MessageId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UsersMessages");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Admin", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Customer", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Doctor", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PetSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(6,2)");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Seller", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterOwner", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("ShelterOwners", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationUser", b =>
                {
                    b.OwnsOne("PetConnect.DAL.Data.Models.Address", "Address", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Street");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.AdminDoctorMessage", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Doctor", "Doctor")
                        .WithMany("AdminMessages")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.AdminPetMessage", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithMany("AdminPetMessages")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Appointment", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PetConnect.DAL.Data.Models.TimeSlot", "TimeSlot")
                        .WithMany("Appointments")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Blog", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorBlogs")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerAddedPets", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "Customer")
                        .WithMany("CustomerAddedPets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithOne("CustomerAddedPets")
                        .HasForeignKey("PetConnect.DAL.Data.Models.CustomerAddedPets", "PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerPetAdoptions", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithMany("CustomerPetAdoptions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "ReceiverCustomer")
                        .WithMany("ReceivedAdoptions")
                        .HasForeignKey("ReceiverCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "RequesterCustomer")
                        .WithMany("RequestedPetAdoptions")
                        .HasForeignKey("RequesterCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("ReceiverCustomer");

                    b.Navigation("RequesterCustomer");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Notification", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.OrderProduct", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Order", "order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Product", "product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Seller", "Seller")
                        .WithMany("ReviewedOrderProduct")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Seller");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Pet", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.PetBreed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetBreed", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.PetCategory", "Category")
                        .WithMany("Breeds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.ProductType", "Producttype")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Seller", "Seller")
                        .WithMany("AddedProducts")
                        .HasForeignKey("SellerId");

                    b.Navigation("Producttype");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ProductType", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.PetBreed", "petpreed")
                        .WithMany("PetPreedProducts")
                        .HasForeignKey("PetPreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("petpreed");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Shelter", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.ShelterOwner", "ShelterOwner")
                        .WithMany("Shelters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShelterOwner");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterAddedPets", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithOne("ShelterAddedPets")
                        .HasForeignKey("PetConnect.DAL.Data.Models.ShelterAddedPets", "PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterAddedPets")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterImages", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterImages")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterLocations", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterLocations")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PetConnect.DAL.Data.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ShelterLocationsShelterId")
                                .HasColumnType("int");

                            b1.Property<int>("ShelterLocationsLocationCode")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Street");

                            b1.HasKey("ShelterLocationsShelterId", "ShelterLocationsLocationCode");

                            b1.ToTable("ShelterLocations");

                            b1.WithOwner()
                                .HasForeignKey("ShelterLocationsShelterId", "ShelterLocationsLocationCode");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPetAdoptions", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithMany("ShelterPetAdoptions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterPetAdoptions")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPhones", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterPhones")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.TimeSlot", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Doctor", "Doctor")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogComment", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.BlogComment", "BlogComment")
                        .WithOne("UserBlogComment")
                        .HasForeignKey("PetConnect.DAL.Data.Models.UserBlogComment", "BlogCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Blog", "Blog")
                        .WithMany("UserBlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "User")
                        .WithMany("UserBlogComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("BlogComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogCommentLike", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.BlogComment", "BlogComment")
                        .WithMany("UserBlogCommentLikes")
                        .HasForeignKey("BlogCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "User")
                        .WithMany("UserBlogCommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogCommentReply", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.BlogComment", "BlogComment")
                        .WithMany("UserBlogCommentReplies")
                        .HasForeignKey("BlogCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.BlogCommentReply", "BlogCommentReply")
                        .WithOne("UserBlogCommentReply")
                        .HasForeignKey("PetConnect.DAL.Data.Models.UserBlogCommentReply", "BlogCommentReplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "User")
                        .WithMany("UserBlogCommentReplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogComment");

                    b.Navigation("BlogCommentReply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogCommentReplyLike", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.BlogCommentReply", "BlogCommentReply")
                        .WithMany("UserBlogCommentReplyLikes")
                        .HasForeignKey("BlogCommentReplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "User")
                        .WithMany("UserBlogCommentReplyLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogCommentReply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserBlogLike", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Blog", "Blog")
                        .WithMany("UserBlogLikes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "User")
                        .WithMany("UserBlogLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UserConnection", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("UserConnections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.UsersMessages", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Admin", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Customer", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Doctor", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Seller", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterOwner", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.ShelterOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UserBlogCommentLikes");

                    b.Navigation("UserBlogCommentReplies");

                    b.Navigation("UserBlogCommentReplyLikes");

                    b.Navigation("UserBlogComments");

                    b.Navigation("UserBlogLikes");

                    b.Navigation("UserConnections");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Blog", b =>
                {
                    b.Navigation("UserBlogComments");

                    b.Navigation("UserBlogLikes");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.BlogComment", b =>
                {
                    b.Navigation("UserBlogComment")
                        .IsRequired();

                    b.Navigation("UserBlogCommentLikes");

                    b.Navigation("UserBlogCommentReplies");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.BlogCommentReply", b =>
                {
                    b.Navigation("UserBlogCommentReply")
                        .IsRequired();

                    b.Navigation("UserBlogCommentReplyLikes");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Pet", b =>
                {
                    b.Navigation("AdminPetMessages");

                    b.Navigation("CustomerAddedPets")
                        .IsRequired();

                    b.Navigation("CustomerPetAdoptions");

                    b.Navigation("ShelterAddedPets")
                        .IsRequired();

                    b.Navigation("ShelterPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetBreed", b =>
                {
                    b.Navigation("PetPreedProducts");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetCategory", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Shelter", b =>
                {
                    b.Navigation("ShelterAddedPets");

                    b.Navigation("ShelterImages");

                    b.Navigation("ShelterLocations");

                    b.Navigation("ShelterPetAdoptions");

                    b.Navigation("ShelterPhones");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.TimeSlot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerAddedPets");

                    b.Navigation("Orders");

                    b.Navigation("ReceivedAdoptions");

                    b.Navigation("RequestedPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Doctor", b =>
                {
                    b.Navigation("AdminMessages");

                    b.Navigation("Appointments");

                    b.Navigation("DoctorBlogs");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Seller", b =>
                {
                    b.Navigation("AddedProducts");

                    b.Navigation("ReviewedOrderProduct");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterOwner", b =>
                {
                    b.Navigation("Shelters");
                });
#pragma warning restore 612, 618
        }
    }
}
