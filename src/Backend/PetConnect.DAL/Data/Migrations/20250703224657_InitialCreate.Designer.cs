// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetConnect.DAL.Data;

#nullable disable

namespace PetConnect.DAL.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250703224657_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerAddedPets", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdoptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.ToTable("CustomerAddedPets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerPetAdoptions", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdoptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PetBreeds");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PetCategory");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Shelter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shelters");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterAddedPets", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "ShelterId");

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.HasIndex("ShelterId");

                    b.ToTable("ShelterAddedPets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterImages", b =>
                {
                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ShelterId", "ImgUrl");

                    b.ToTable("ShelterImages");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterLocations", b =>
                {
                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.HasKey("ShelterId", "LocationCode");

                    b.ToTable("ShelterLocations");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPetAdoptions", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetId", "ShelterId");

                    b.HasIndex("ShelterId");

                    b.ToTable("ShelterPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPhones", b =>
                {
                    b.Property<int>("ShelterId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(15)");

                    b.HasKey("ShelterId", "Phone");

                    b.ToTable("ShelterPhones");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Admin", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Customer", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Doctor", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PetSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(6,2)");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterOwner", b =>
                {
                    b.HasBaseType("PetConnect.DAL.Data.Identity.ApplicationUser");

                    b.ToTable("ShelterOwners", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Identity.ApplicationUser", b =>
                {
                    b.OwnsOne("PetConnect.DAL.Data.Models.Address", "Address", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Street");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerAddedPets", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "Customer")
                        .WithMany("CustomerAddedPets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithOne("CustomerAddedPets")
                        .HasForeignKey("PetConnect.DAL.Data.Models.CustomerAddedPets", "PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.CustomerPetAdoptions", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Customer", "Customer")
                        .WithMany("CustomerPetAdoptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithMany("CustomerPetAdoptions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Pet", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.PetBreed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetBreed", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.PetCategory", "Category")
                        .WithMany("Breeds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Shelter", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.ShelterOwner", "ShelterOwner")
                        .WithMany("Shelters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShelterOwner");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterAddedPets", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithOne("ShelterAddedPets")
                        .HasForeignKey("PetConnect.DAL.Data.Models.ShelterAddedPets", "PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterAddedPets")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterImages", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterImages")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterLocations", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterLocations")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PetConnect.DAL.Data.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ShelterLocationsShelterId")
                                .HasColumnType("int");

                            b1.Property<int>("ShelterLocationsLocationCode")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Street");

                            b1.HasKey("ShelterLocationsShelterId", "ShelterLocationsLocationCode");

                            b1.ToTable("ShelterLocations");

                            b1.WithOwner()
                                .HasForeignKey("ShelterLocationsShelterId", "ShelterLocationsLocationCode");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPetAdoptions", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Pet", "Pet")
                        .WithMany("ShelterPetAdoptions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterPetAdoptions")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterPhones", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Models.Shelter", "Shelter")
                        .WithMany("ShelterPhones")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Admin", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Customer", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Doctor", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterOwner", b =>
                {
                    b.HasOne("PetConnect.DAL.Data.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("PetConnect.DAL.Data.Models.ShelterOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Pet", b =>
                {
                    b.Navigation("CustomerAddedPets")
                        .IsRequired();

                    b.Navigation("CustomerPetAdoptions");

                    b.Navigation("ShelterAddedPets")
                        .IsRequired();

                    b.Navigation("ShelterPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetBreed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.PetCategory", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Shelter", b =>
                {
                    b.Navigation("ShelterAddedPets");

                    b.Navigation("ShelterImages");

                    b.Navigation("ShelterLocations");

                    b.Navigation("ShelterPetAdoptions");

                    b.Navigation("ShelterPhones");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddedPets");

                    b.Navigation("CustomerPetAdoptions");
                });

            modelBuilder.Entity("PetConnect.DAL.Data.Models.ShelterOwner", b =>
                {
                    b.Navigation("Shelters");
                });
#pragma warning restore 612, 618
        }
    }
}
